#' @param a side a = side b
#' @return hypotenuse c
pythagoras <- function(a) {
return(sqrt(a^2 + a^2))
}
pythagoras(5)
#' @title circle area function
#' @description calculates the area of a circle
#' @param r radius of circle (as numeric)
#' @return area of circle
circle_area <- function(r = 1) {
return(pi*r^2)
}
#' @title circle area function
#' @description calculates the area of a circle
#' @param r radius of circle (numeric, nonnegative)
#' @return area of circle
circle_area <- function(r = 1) {
if(r < 0){
stop("radius cannot be negative")
}
return(pi*r^2)
}
circle_area()
circle_area(r = 3)
circle_area(r = -2)
miles = c(1:9, seq(10,100,10))
kms = miles2kms(miles)
#' @title square
#' @description calculates square of x
#' @param x a numeric value
#' @return computed square
f <- function(x) {
return(x^2)
}
#' @title two times x plus 5
#' @description calculates 2x+5
#' @param x a numeric value
#' @return computed 2x+5
g <- function(x) {
return(2*x + 5)
}
f(2)
f(-5)
g(0)
g(-5/2)
#' @title f composed with g
#' @description calculates f(x) = x^2 composed with g(x) = 2x = 5
#' @param x a numeric value
#' @return computed function composition
fog <- function(x) {
return(f(g(x)))
}
#' @title g composed with f
#' @description calculates g(x) = 2x + 5 composed with f(x) = x^2
#' @param x a numeric value
#' @return computed function composition
gof <- function(x) {
return(g(f(x)))
}
fog(2)
fog(-5)
gof(0)
gof(-5/2)
#' @title pythagorean formula
#' @description calculates the pythagorean formula for a and b
#' @param a side a
#' @param b side b
#' @return hypotenuse c
pythagoras <- function(a,b) {
return(sqrt(a^2 + b^2))
}
pythagoras(3,4)
#' @title pythagorean formula equal legs
#' @description calculates the pythagorean formula for equal sized legs
#' @param a side a = side b
#' @return hypotenuse c
pythagoras <- function(a) {
return(sqrt(a^2 + a^2))
}
pythagoras(5)
#' @title circle area function
#' @description calculates the area of a circle
#' @param r radius of circle (as numeric)
#' @return area of circle
circle_area <- function(r = 1) {
return(pi*r^2)
}
#' @title circle area function
#' @description calculates the area of a circle
#' @param r radius of circle (numeric, nonnegative)
#' @return area of circle
circle_area <- function(r = 1) {
if(r < 0){
stop("radius cannot be negative")
}
return(pi*r^2)
}
circle_area()
circle_area(r = 3)
circle_area(r = -2)
miles = c(1:9, seq(10,100,10))
kms = miles2kms(miles)
#' @title mi to km function
#' @description converts miles to kilometers
#' @param m miles to be converted (as numeric)
#' @return kilometer conversion
miles2kms <- function(m = 1) {
return(1.6*m)
}
data.frame(miles, kms)
miles = c(1:9, seq(10,100,10))
kms = miles2kms(miles)
data.frame(miles, kms)
#' @title gallons to liters converter
#' @description converts gallons to liters
#' @param g gallons to be converted (numeric)
#' @return liter conversion
gallons2liters <- function(g = 1) {
return(g*3.78541)
}
#' @title even checker function
#' @description tells whether an input is even
#' @param x anything
#' @return if x is even (as logical)
is_even <- function(x) {
if(class(x) != 'numeric') {
return(NA)
} else {
return(x %% 2 == 0)
}
}
#' @title even checker function
#' @description tells whether an input is even
#' @param x anything
#' @return if x is even (as logical)
is_even <- function(x) {
if(class(x) != 'integer') {
return(NA)
} else {
return(x %% 2 == 0)
}
}
is_even(10)
is_even(33)
is_even('a')
#' @title even checker function
#' @description tells whether an input is even
#' @param x anything
#' @return if x is even (as logical)
is_even <- function(x) {
if(class(x) != 'integer') {
return(NA)
} else {
return(x %% 2 == 0)
}
}
#' @title even checker function
#' @description tells whether an input is even
#' @param x anything
#' @return if x is even (as logical)
is_even <- function(x) {
if(class(x) != 'numeric') {
return(NA)
} else {
return(x %% 2 == 0)
}
}
is_even(10)
is_even(33)
is_even('a')
is_odd(1)
#' @title odd number checker
#' @description tells whether an input is odd
#' @param x anything
#' @return if x is odd (as logical)
is_odd <- function(x) {
return(!is_even(x))
}
is_odd(1)
is_odd(4)
is_odd('a')
convert(3,"km")
#' @title square
#' @description calculates square of x
#' @param x a numeric value
#' @return computed square
f <- function(x) {
return(x^2)
}
rm(lilst=ls())
rm(list=ls())
#' @title square
#' @description calculates square of x
#' @param x a numeric value
#' @return computed square
f <- function(x) {
return(x^2)
}
#' @title two times x plus 5
#' @description calculates 2x+5
#' @param x a numeric value
#' @return computed 2x+5
g <- function(x) {
return(2*x + 5)
}
f(2)
f(-5)
g(0)
g(-5/2)
#' @title f composed with g
#' @description calculates f(x) = x^2 composed with g(x) = 2x = 5
#' @param x a numeric value
#' @return computed function composition
fog <- function(x) {
return(f(g(x)))
}
#' @title g composed with f
#' @description calculates g(x) = 2x + 5 composed with f(x) = x^2
#' @param x a numeric value
#' @return computed function composition
gof <- function(x) {
return(g(f(x)))
}
fog(2)
fog(-5)
gof(0)
gof(-5/2)
#' @title pythagorean formula
#' @description calculates the pythagorean formula for a and b
#' @param a side a
#' @param b side b
#' @return hypotenuse c
pythagoras <- function(a,b) {
return(sqrt(a^2 + b^2))
}
pythagoras(3,4)
#' @title pythagorean formula equal legs
#' @description calculates the pythagorean formula for equal sized legs
#' @param a side a = side b
#' @return hypotenuse c
pythagoras <- function(a) {
return(sqrt(a^2 + a^2))
}
pythagoras(5)
#' @title circle area function
#' @description calculates the area of a circle
#' @param r radius of circle (as numeric)
#' @return area of circle
circle_area <- function(r = 1) {
return(pi*r^2)
}
#' @title circle area function
#' @description calculates the area of a circle
#' @param r radius of circle (numeric, nonnegative)
#' @return area of circle
circle_area <- function(r = 1) {
if(r < 0){
stop("radius cannot be negative")
}
return(pi*r^2)
}
circle_area()
circle_area(r = 3)
circle_area(r = -2)
#' @title cylinder area function
#' @description calculates the area of a cylinder
#' @param r radius of cylinder (as numeric)
#' @param h height of cylinder (as numeric)
#' @return area of cylinder
cylinder_area <- function(r = 1, h = 1) {
if(r < 0 | h < 0){
stop("Parameters cannot be negative")
}
return(2*pi*r*h + 2*circle_area(r))
}
cylinder_area()
cylinder_area(2,3)
cylinder_area(-2,1)
#' @title cylinder volume function
#' @description calculates the volume of a cylinder
#' @param r radius of cylinder (as numeric)
#' @param h height of cylinder (as numeric)
#' @return area of cylinder
cylinder_area <- function(r = 1, h = 1) {
if(r < 0 | h < 0){
stop("Parameters cannot be negative")
}
return(h * circle_area(r))
}
cylinder_volume()
#' @title mi to km function
#' @description converts miles to kilometers
#' @param m miles to be converted (as numeric)
#' @return kilometer conversion
miles2kms <- function(m = 1) {
return(1.6*m)
}
miles = c(1:9, seq(10,100,10))
kms = miles2kms(miles)
data.frame(miles, kms)
#' @title gallons to liters converter
#' @description converts gallons to liters
#' @param g gallons to be converted (as numeric)
#' @return liter conversion
gallons2liters <- function(g = 1) {
return(g * 3.78541)
}
#' @title liters to gallons function
#' @description converts liters to gallons
#' @param l liters to be converted (as numeric)
#' @return liter conversion
liters2gallons <- function(l = 1) {
return(1/(3.78541^2) * gallons2liters(l))
}
liters = c(1:9, seq(10,100,10))
gallons = liters2gallons(liters)
data.frame(liters, gallons)
#' @title seconds to years function
#' @description converts seconds to years
#' @param s seconds (as numeric)
#' @return time in years
seconds2years <- function(s ) {
return(s/((60^2)*24*365.25))
}
seconds2years(1000000000)
#' @title cubed
#' @description calculates cube
#' @param x a number (numeric)
#' @return x cubed
f <- function(x) {
return(x^3)
}
x <- seq(-4,4,length.out = 20)
y <- f(x)
plot(x,y,type = 'l', lwd = 3, col = '#FB7215', las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^3)))
#' @title new f
#' @description calculates this f
#' @param x a number (numeric)
#' @return the y value
f <- function(x) {
return((x^2 - 1)*(x + 3)^3)
}
x <- seq(-4,4,length.out = 20)
y <- f(x)
plot(x,y,type = 'l', lwd = 3, col = '#FB7215', las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2 - 1), (x + 3)^3)))
#' @title new f
#' @description calculates this f
#' @param x a number (numeric)
#' @return the y value
f <- function(x) {
return((x^2-1)*(x^2-9))
}
x <- seq(-4,4,length.out = 20)
y <- f(x)
plot(x,y,type = 'l', lwd = 3, col = '#FB7215', las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2-1), (x^2-9))))
z <- 100 * pi
if (z<100) {
z=0
} else if (z>100) {
z=100
} else {
z = z
}
z
#' @title even checker function
#' @description tells whether an input is even
#' @param x anything
#' @return if x is even (as logical)
is_even <- function(x) {
if(class(x) != 'numeric') {
return(NA)
} else {
return(x %% 2 == 0)
}
}
is_even(10)
is_even(33)
is_even('a')
#' @title odd number checker
#' @description tells whether an input is odd
#' @param x anything
#' @return if x is odd (as logical)
is_odd <- function(x) {
return(!is_even(x))
}
#' @title grader function
#' @description grades assignments
#' @param x score on assignment (as numeric)
#' @return letter grade(character)
grade <- function(x) {
grade = x
if (grade < 60) {
grade = 'F'
}else if(grade < 70) {
grade = 'D'
} else if (grade < 80) {
grade = 'C'
} else if (grade < 90) {
grade = 'B'
} else {
grade = 'A'
}
return(grade)
}
grade(90)
grade(89.9999)
grade(70.0000001)
grade(50)
#' @title grader function
#' @description grades assignments
#' @param x score on assignment (as numeric)
#' @return letter grade(as character)
grade <- function(x) {
grade = x
if (grade < 0 | grade > 100) {
stop('score must be a number between 0 and 100')
} else if (grade < 60) {
grade = 'F'
}else if(grade < 70) {
grade = 'D'
} else if (grade < 80) {
grade = 'C'
} else if (grade < 90) {
grade = 'B'
} else {
grade = 'A'
}
return(grade)
}
grade(-9)
#' @title miles to inches converter
#' @description converts miles to inches
#' @param x miles (as numeric)
#' @return inches (as numeric)
miles2inches <- function(x=1) {
return(x*63360)
}
#' @title miles to feet converter
#' @description converts miles to feet
#' @param x miles (as numeric)
#' @return feet (as numeric)
miles2feet <- function(x=1) {
return(x*5280)
}
#' @title miles to yards converter
#' @description converts miles to yards
#' @param x miles (as numeric)
#' @return yards (as numeric)
miles2yards <- function(x=1) {
return(x*1760)
}
#' @title miles to meters converter
#' @description converts miles to meters
#' @param x miles (as numeric)
#' @return meters (as numeric)
miles2meters<- function(x=1) {
return(x*0.00062137)
}
#' @title miles to kilometers converter
#' @description converts miles to kms
#' @param x miles (as numeric)
#' @return kilometers (as numeric)
miles2kms <- function(x=1) {
return(x*0.62137)
}
#' @title miles converter
#' @description converts miles to other units
#' @param x miles (as numeric)
#' @param to units to be converted to, such as "in", "ft", "yd", or "m", default is "km"
#' @return  (numeric)
convert <- function(x, to = "km") {
return(
switch(to,
"in" = miles2inches(x),
"ft" = miles2feet(x),
"yd" = miles2yards(x),
"m" = miles2meters(x),
"km" = miles2kms(x))
)
}
#' @title miles converter
#' @description converts miles to other units
#' @param x miles (as numeric)
#' @param to units to be converted to, such as "in", "ft", "yd", or "m", default is "km"
#' @return  (numeric)
convert <- function(x, to = "km") {
return(
switch(to,
"in" = miles2inches(x),
"ft" = miles2feet(x),
"yd" = miles2yards(x),
"m" = miles2meters(x),
"km" = miles2kms(x))
)
}
convert(3,"in")
convert(3,"ft")
convert(3,"yd")
convert(3,"m")
convert(3,"km")
grade(90)
grade(101)
circle_area()
circle_area(r = 3)
circle_area(r = -2)
